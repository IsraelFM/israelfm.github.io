[{"content":"O que um servi√ßo de mensageria? Um servi√ßo ou sistema de mensageria √© uma abordagem comum utilizada em sistemas distribu√≠dos para transferir dados entre aplica√ß√µes. Desse modo, as aplica√ß√µes que os usam podem atentar-se exclusivamente ao tratamento desses dados, sem a ocupa√ß√£o de trabalhar a fundo a transmiss√£o ou compartilhamento deles.\nDiversos s√£o os padr√µes de mensageria, por√©m vou dar mais aten√ß√£o no Publish-Subscribe (pub-sub). Dentre os muitos motivos que poderia citar aqui para essa prefer√™ncia, simplesmente prefiro dizer que √© o padr√£o mais presente nas leituras que fiz e tamb√©m aquele com o qual tive a oportunidade de trabalhar.\nAgora, antes de destrinchar o pub-sub, precisamos compreender alguns pontos fundamentais como o protocolo utilizado e o fluxo b√°sico de funcionamento.\nO protocolo da mensageria: AMQP O AMQP (Advanced Message Queuing Protocol) √© um protocolo de mensagens baseado em fila que fornece garantias de entrega, roteamento baseado em t√≥picos e suporte a v√°rios formatos de mensagem. Ele √© muito utilizado em sistemas de integra√ß√£o e tem suporte em muitas linguagens e plataformas.\n Leitura complementar H√° muitos outros protocolos de mensagens tais como STOMP, voltado a aplicativos de streaming, MQTT, direcionado para aplica√ß√µes em IoT (Internet of Things). E aqu√©m desses, ainda h√° outros protocolos complementares, presentes em aplica√ß√µes que utilizam a mensageria:\n HTTP: utilizado para a comunica√ß√£o entre servidores da web e navegadores da web, mas tamb√©m pode ser usado para enviar e receber mensagens; TCP: um protocolo de rede usado para garantir a entrega confi√°vel de dados.  Como funciona? Os servi√ßos de mensageria geralmente envolvem tr√™s componentes principais, conforme ilustrado na imagem:\n O produtor √© o aplicativo que envia a mensagem; A fila √© onde as mensagens s√£o armazenadas; O consumidor √© o aplicativo que recebe a mensagem.  As mensagens s√£o geralmente enviadas por meio de um protocolo espec√≠fico, como o AMQP que comentamos anteriormente.\nOs servi√ßos de mensageria utilizam um modelo de publica√ß√£o e assinatura (ou pub-sub), no qual os usu√°rios podem publicar mensagens em um t√≥pico ou canal espec√≠fico e outros usu√°rios podem se inscrever para receber essas mensagens.\nMas quais s√£o os benef√≠cios? Os servi√ßos de mensageria oferecem muitas vantagens em rela√ß√£o a outros m√©todos de comunica√ß√£o, incluindo:\n Desacoplamento: os sistemas se comunicam sem conhecimento ou depend√™ncia direta um do outro; Escalabilidade: o n√∫mero de produtores e consumidores de mensagens podem ser dimensionados de acordo com a demanda; Resili√™ncia: oferta de garantias de entrega de mensagens e recupera√ß√£o em caso de falha; Flexibilidade: integra√ß√£o de sistemas heterog√™neos e a implementa√ß√£o de diferentes padr√µes de comunica√ß√£o.  Servi√ßos dispon√≠veis Existem v√°rios servi√ßos de mensageria dispon√≠veis. Os dois mais populares est√£o apresentados na Figura abaixo.\nUm servidor de mensagens √© um software que gerencia o envio e a recep√ß√£o de mensagens entre aplicativos. Sendo ele um componente importante de um sistema de mensageria, mas n√£o √© o √∫nico componente. Ou seja, pode haver um trabalho em adicional quando se usa o RabbitMQ para realizar o gerenciamento de filas em situa√ß√µes espec√≠ficas, por exemplo.\nJ√° um sistema de mensageria √© um conjunto mais amplo de ferramentas e tecnologias. Al√©m do servidor de mensagens, um sistema de mensageria pode incluir outros componentes, como um mecanismo de gerenciamento de filas, um mecanismo de roteamento de mensagens e um mecanismo de processamento de fluxo.\nAgora, quando usar um ou outro depender√° da necessidade. O RabbitMQ √© uma boa escolha quando a entrega confi√°vel e a ordem das mensagens s√£o cr√≠ticas1, enquanto o Kafka √© mais adequado para lidar com grandes volumes de dados em tempo real2.\nUm exemplo de uso Imagine que voc√™ quer enviar uma mensagem para um amigo pelo WhatsApp. Sem um servi√ßo de mensageria, voc√™ precisaria enviar a mensagem diretamente para o celular dele. Isso funcionaria bem se voc√™ estivesse em um ambiente com boa cobertura de rede e o telefone do seu amigo estivesse conectado. Mas se a rede estiver congestionada ou o telefone estiver desligado, a mensagem n√£o ser√° entregue üòî.\nCom um servi√ßo de mensageria, a mensagem que voc√™ envia √© primeiro direcionada para um servidor central que gerencia as mensagens do WhatsApp. O servidor verifica se o telefone do seu amigo est√° online e, se estiver, entrega a mensagem. Se o telefone estiver offline, o servidor armazena a mensagem at√© que o telefone volte a ficar online.\nO servi√ßo de mensageria lida com a entrega da mensagem para voc√™, para que voc√™ n√£o precise se preocupar em verificar se seu amigo est√° online ou se a mensagem foi entregue. E se a mensagem n√£o for entregue imediatamente, voc√™ pode ter a certeza de que o servidor continuar√° tentando entregar a mensagem at√© que seja bem-sucedido.\n  https://www.cloudamqp.com/blog/why-use-rabbitmq-in-a-microservice-architecture.html\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n https://kafka.apache.org/intro\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://israelfm.github.io/posts/messaging-systems-intro/","summary":"O que um servi√ßo de mensageria? Um servi√ßo ou sistema de mensageria √© uma abordagem comum utilizada em sistemas distribu√≠dos para transferir dados entre aplica√ß√µes. Desse modo, as aplica√ß√µes que os usam podem atentar-se exclusivamente ao tratamento desses dados, sem a ocupa√ß√£o de trabalhar a fundo a transmiss√£o ou compartilhamento deles.\nDiversos s√£o os padr√µes de mensageria, por√©m vou dar mais aten√ß√£o no Publish-Subscribe (pub-sub). Dentre os muitos motivos que poderia citar aqui para essa prefer√™ncia, simplesmente prefiro dizer que √© o padr√£o mais presente nas leituras que fiz e tamb√©m aquele com o qual tive a oportunidade de trabalhar.","title":"Servi√ßos de mensageria: introdu√ß√£o ao conceito"},{"content":"Porque aprender sobre o Docker? Porque simplesmente √© uma das bases do curr√≠culo moderno. Voc√™, que est√° a procura de uma oportunidade naquela empresa gigante, sonhando alto, precisa saber pelo menos a base, para que tenha a condi√ß√£o de se encaixar como um potencial competidor.\n√â uma ferramenta muito √∫til quando falamos de desenvolvimento. Na sequ√™ncia falaremos de alguns dos motivos mais ic√¥nicos.\nQuando iniciamos um projeto, √© costumeiro termos de instalar alguns programas, sendo que toda a instala√ß√£o √© feita \u0026ldquo;na m√£o\u0026rdquo;. Al√©m disso, alguns desses programas raramente s√£o utilizados ap√≥s a finaliza√ß√£o do projeto. A consequ√™ncia desse processo, direto na m√°quina, resulta em \u0026ldquo;lixo\u0026rdquo; e mem√≥ria inutilmente consumida para manter programas, de certa forma, inativos.\nA situa√ß√£o se repete a cada vez que eu inicio um projeto, um cl√°ssico loop infinito de caos e desordem.\nEm um ambiente corporativo, a pr√°tica supracitada √© definitivamente invi√°vel. Primeiro, pelo esfor√ßo que seria demandado e segundo pela inconsist√™ncia entre m√°quinas, j√° que cada um ter√° uma configura√ß√£o pr√≥pria, al√©m de softwares j√° instalados e at√© mesmo Sistema Operacional (SO) diferente entre si. Afinal, quem nunca ouviu:\n Na minha m√°quina funciona!\n‚Äî Justicativa do dev ap√≥s o cliente reclamar de bug feature\n Agora, voc√™ deve estar me perguntando, \u0026ldquo;como assim direto na m√°quina? Tem outra forma que n√£o essa?\u0026rdquo;. Ao que eu te respondo, \u0026ldquo;√© claro, te apresento o Docker\u0026rdquo;.\nO que √© Docker? √â uma ferramenta1 classificada como container runtime 2. Isso significa que com o Docker eu consigo subir processos (containers) individuais, utilizando a virtualiza√ß√£o do sistema operacional.\nContaineriza√ß√£o vs Virtualiza√ß√£o A grande diferen√ßa de um container para uma m√°quina virtual (Virtual Machine - VM), √© que n√£o ocorre a instala√ß√£o de todo o sistema operacional.\nQuando h√° uma m√°quina virtual operando, ela virtualiza o hardware. Sendo assim, ela passa a ocupar um espa√ßo real de um SO completo na minha m√°quina.\nAgora, utilizando container a situa√ß√£o √© outra. N√≥s usamos o conceito de imagens \u0026ndash; descritivo do que haver√° no container \u0026ndash; relativamente pequenas que sobem e rodam apenas o que for preciso.\nPara finalizar a instala√ß√£o de uma VM, √© necess√°rio dar boot nela. Dispensamos esse processo em container, uma vez que assim que ele subir o processo j√° estar√° operando.\nInstala√ß√£o O Docker foi originalmente criado para plataformas Linux. Mas com a demanda crescente, hoje tamb√©m h√° suporte para outras plataformas, como Microsoft Windows e macOS. Como o passo a passo varia de SO para SO, segue o link: https://docs.docker.com/get-docker/.\n  https://www.docker.com/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Software que executa containers e gerencia as imagens do mesmo. Ex.: Docker e containerd\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://israelfm.github.io/posts/docker-basics/","summary":"Porque aprender sobre o Docker? Porque simplesmente √© uma das bases do curr√≠culo moderno. Voc√™, que est√° a procura de uma oportunidade naquela empresa gigante, sonhando alto, precisa saber pelo menos a base, para que tenha a condi√ß√£o de se encaixar como um potencial competidor.\n√â uma ferramenta muito √∫til quando falamos de desenvolvimento. Na sequ√™ncia falaremos de alguns dos motivos mais ic√¥nicos.\nQuando iniciamos um projeto, √© costumeiro termos de instalar alguns programas, sendo que toda a instala√ß√£o √© feita \u0026ldquo;na m√£o\u0026rdquo;.","title":"Docker: coment√°rios e notas"},{"content":"","permalink":"https://israelfm.github.io/tags/","summary":"tags","title":"Tags"}]