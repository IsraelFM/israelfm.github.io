[{"content":"Porque aprender sobre o Docker? Porque simplesmente é uma das bases do currículo moderno. Você, que está a procura de uma oportunidade naquela empresa gigante, sonhando alto, precisa saber pelo menos a base, para que tenha a condição de se encaixar como um potencial competidor.\nÉ uma ferramenta muito útil quando falamos de desenvolvimento. Na sequência falaremos de alguns dos motivos mais icônicos.\nQuando iniciamos um projeto, é costumeiro termos de instalar alguns programas, sendo que toda a instalação é feita \u0026ldquo;na mão\u0026rdquo;. Além disso, alguns desses programas raramente são utilizados após a finalização do projeto. A consequência desse processo, direto na máquina, resulta em \u0026ldquo;lixo\u0026rdquo; e memória inutilmente consumida para manter programas, de certa forma, inativos.\nA situação se repete a cada vez que eu inicio um projeto, um clássico loop infinito de caos e desordem.\nEm um ambiente corporativo, a prática supracitada é definitivamente inviável. Primeiro, pelo esforço que seria demandado e segundo pela inconsistência entre máquinas, já que cada um terá uma configuração própria, além de softwares já instalados e até mesmo Sistema Operacional (SO) diferente entre si. Afinal, quem nunca ouviu:\n Na minha máquina funciona!\n— Justicativa do dev após o cliente reclamar de bug feature\n Agora, você deve estar me perguntando, \u0026ldquo;como assim direto na máquina? Tem outra forma que não essa?\u0026rdquo;. Ao que eu te respondo, \u0026ldquo;é claro, te apresento o Docker\u0026rdquo;.\nO que é Docker? É uma ferramenta1 classificada como container runtime 2. Isso significa que com o Docker eu consigo subir processos (containers) individuais, utilizando a virtualização do sistema operacional.\nContainerização vs Virtualização A grande diferença de um container para uma máquina virtual (Virtual Machine - VM), é que não ocorre a instalação de todo o sistema operacional.\nQuando há uma máquina virtual operando, ela virtualiza o hardware. Sendo assim, ela passa a ocupar um espaço real de um SO completo na minha máquina.\nAgora, utilizando container a situação é outra. Nós usamos o conceito de imagens \u0026ndash; descritivo do que haverá no container \u0026ndash; relativamente pequenas que sobem e rodam apenas o que for preciso.\nPara finalizar a instalação de uma VM, é necessário dar boot nela. Dispensamos esse processo em container, uma vez que assim que ele subir o processo já estará operando.\nInstalação O Docker foi originalmente criado para plataformas Linux. Mas com a demanda crescente, hoje também há suporte para outras plataformas, como Microsoft Windows e macOS. Como o passo a passo varia de SO para SO, segue o link: https://docs.docker.com/get-docker/.\n  https://www.docker.com/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Software que executa containers e gerencia as imagens do mesmo. Ex.: Docker e containerd\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://israelfm.github.io/posts/docker-basics/","summary":"Porque aprender sobre o Docker? Porque simplesmente é uma das bases do currículo moderno. Você, que está a procura de uma oportunidade naquela empresa gigante, sonhando alto, precisa saber pelo menos a base, para que tenha a condição de se encaixar como um potencial competidor.\nÉ uma ferramenta muito útil quando falamos de desenvolvimento. Na sequência falaremos de alguns dos motivos mais icônicos.\nQuando iniciamos um projeto, é costumeiro termos de instalar alguns programas, sendo que toda a instalação é feita \u0026ldquo;na mão\u0026rdquo;.","title":"Docker: comentários e notas"},{"content":"","permalink":"https://israelfm.github.io/tags/","summary":"tags","title":"Tags"}]